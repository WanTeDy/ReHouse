@using ReHouse.Utils.Helpers
@using ReHouse.Utils.DataBase.AdvertParams
@using System.Globalization;
@model Advert
@{
            Layout = "~/Areas/Cabinet/Views/Shared/_Layout.cshtml";
}

<style>
    #map {
        width: 614px;
        height: 428px;
        border: 0;
    }
</style>

@section scripts {
@Scripts.Render("~/bundles/imageLoader")
    @Scripts.Render("~/bundles/slides")
    @Scripts.Render("~/bundles/deleteImage")
    <script>
        $(function () {
            $('#products').slides({
                preload: true,
                preloadImage: '',
                effect: 'slide, fade',
                crossfade: true,
                slideSpeed: 200,
                fadeSpeed: 500,
                generateNextPrev: true,
                generatePagination: false
            });
        });
    </script>

    <script type="text/javascript" src="http://maps.google.com/maps/api/js?key=AIzaSyDV3GzGjYIAyhiMq9Cof5SEZDuh0QeBD0Q&libraries=places&language=ru"></script>

    <script>



        $(function () {

            ///map
            function initialize() {

                console.log('Init');

                var map;
                var geocoder = new google.maps.Geocoder();

                function geocodePosition(pos) {
                    geocoder.geocode({
                        latLng: pos
                    },
                        function (responses) {
                            if (responses && responses.length > 0) {
                                $("#pac-input").val(responses[0].formatted_address);
                                currentPosition = responses[0].address_components;
                            } else {
                                if (typeof (marker) !== 'undefined')
                                    marker.formatted_address = 'Cannot determine address at this location.';
                                else
                                    console.log('marker is null')

                            }
                        });
                }

                var myOptions = {
                    zoom: 5,
                    visible: true,
                    center: new google.maps.LatLng(46.482526, 30.723309500000028),

                    @*@(Model.Latitude.ToString().Replace(',', '.')),
                    @(Model.Longitude.ToString().Replace(',', '.'))),*@
                    mapTypeId: google.maps.MapTypeId.ROADMAP
                };


                map = new google.maps.Map($('#map')[0], myOptions);

                var input = (document.getElementById('pac-input'));
                map.controls[google.maps.ControlPosition.LEFT_TOP].push(input);

                var searchBox = new google.maps.places.SearchBox((input));
                /**
                                     * Global marker object that holds all markers.
                                     */
                var markers = {};

                /**
                                     * Concatenates given lat and lng with an underscore and returns it.
                                     * This id will be used as a key of marker to cache the marker in markers object.
                                     */
                var getMarkerUniqueId = function (lat, lng) {
                    return lat.toFixed(5) + '_' + lng.toFixed(5);
                }

                /**
                                     * Creates an instance of google.maps.LatLng by given lat and lng values and returns it.
                                     * This function can be useful for getting new coordinates quickly.
                                     */
                var getLatLng = function (lat, lng) {
                    return new google.maps.LatLng(lat, lng);
                };

                /**
                                     * Binds click event to given map and invokes a callback that appends a new marker to clicked location.
                                     */
                var addMarker = google.maps.event.addListener(map,
                    'click',
                    function (e) {

                        console.log('click')
                        for (var key in markers) {
                            removeMarker(markers[key], key);
                        }

                        var lat = e.latLng.lat(); // lat of clicked point
                        var lng = e.latLng.lng(); // lng of clicked point
                        var markerId = getMarkerUniqueId(lat, lng);
                        // an that will be used to cache this marker in markers object.

                        $("#place-ltd").val((lat + '').replace('.', ','));
                        $("#place-lgd").val((lng + '').replace('.', ','));
                        //latitude = lat + '';
                        //longtitude = lng + '';
                        //$("#place-ltd").val((lat + ''));
                        //$("#place-lgd").val((lng + ''));
                        var marker = new google.maps.Marker({
                            position: getLatLng(lat, lng),
                            map: map,
                            id: 'marker_' + markerId
                        });

                        markers[markerId] = marker; // cache marker in markers object
                        bindMarkerEvents(marker); // bind right click event to marker

                        geocodePosition(marker.getPosition());
                    });

                /**
                                     * Binds right click event to given marker and invokes a callback function that will remove the marker from map.
                                     */
                var bindMarkerEvents = function (marker) {
                    google.maps.event.addListener(marker,
                        "click",
                        function (point) {
                            console.log('Marker click')
                            var markerId = getMarkerUniqueId(point.latLng
                                .lat(),
                                point.latLng.lng()); // get marker id by using clicked point's coordinate
                            var marker = markers[markerId]; // find marker
                            removeMarker(marker, markerId); // remove it
                        });
                };

                /**
                                     * Removes given marker from map.
                                     */
                var removeMarker = function (marker, markerId) {
                    marker.setMap(null); // set markers setMap to null to remove it from map
                    delete markers[markerId]; // delete marker instance from markers object
                };

                google.maps.event.addListener(searchBox,
                    'places_changed',
                    function () {
                        console.log('places_changed');
                        var places = searchBox.getPlaces();

                        if (places.length == 0) {
                            return;
                        }
                        for (var i = 0, marker; marker = markers[i]; i++) {
                            marker.setMap(null);
                        }

                        // For each place, get the icon, place name, and location.
                        markers = {};
                        var bounds = new google.maps.LatLngBounds();
                        for (var i = 0, place; place = places[i]; i++) {
                            var lat = place.geometry.location.lat();
                            var lng = place.geometry.location.lng();
                            var markerId = getMarkerUniqueId(lat, lng);
                            // Create a marker for each place.
                            var marker = new google.maps.Marker({
                                map: map,
                                position: getLatLng(lat, lng),
                                id: 'marker_' + markerId
                            });
                            $("#place-ltd").val((lat + '').replace('.', ','));
                            $("#place-lgd").val((lng + '').replace('.', ','));
                            //latitude = lat + '';
                            //longtitude = lng + '';
                            //$("#place-ltd").val(lat);
                            //$("#place-lgd").val(lng);

                            markers[markerId] = marker;
                            bindMarkerEvents(marker); // bind right click event to marker
                            bounds.extend(place.geometry.location);
                        }

                        map.fitBounds(bounds);
                    });

                google.maps.event.addListener(map,
                    'bounds_changed',
                    function () {

                        console.log('bounds chandged');
                        var bounds = map.getBounds();
                        searchBox.setBounds(bounds);
                    });

                google.maps.event.addListenerOnce(map,
                    'idle',
                    function () {
                        var preset = null;
                        @if (Model != null && Model.Latitude != 0 && Model.Longitude != 0)
                    {


                    @Html.Raw("preset = { lt : " + Model.Latitude.ToString(CultureInfo.InvariantCulture) + ", lg : " + Model.Longitude.ToString(CultureInfo.InvariantCulture) + " };")
                    }

                        if (preset != null) {
                            var markerId = getMarkerUniqueId(preset
                                .lt,
                                preset.lg); // an that will be used to cache this marker in markers object.
                            var marker = new google.maps.Marker({
                                position: getLatLng(preset.lt, preset.lg),
                                map: map,
                                id: 'marker_' + markerId
                            });
                            markers[markerId] = marker; // cache marker in markers object
                            bindMarkerEvents(marker);
                        }
                    });
            }

            google.maps.event.addDomListener(window, 'load', initialize);

            //initialize();
        });
        google.maps.event.trigger($("#map")[0], 'resize');

    </script>
}
<div class="list_">
    <h2 class="tabset_label">Table of Contents</h2>
    <ul class="tabset_tabs">
        <li class="firstchild"><a href="~/cabinet/profile">Профиль</a></li>
        <li>
            <a class="preActive active">Продажа</a>
            <ol>
                <li><a href="~/cabinet/sale/flat">Квартиры</a></li>
                <li><a href="~/cabinet/sale/house">Дома</a></li>
                <li><a href="~/cabinet/sale/homestead">Участки</a></li>
                <li><a href="~/cabinet/sale/commerce">Коммерция</a></li>
            </ol>
        </li>

        <li>
            <a class="1">Аренда</a>
            <ol>
                <li><a href="~/cabinet/rent/flat">Квартиры</a></li>
                <li><a href="~/cabinet/rent/house">Дома</a></li>
                @*<li><a href="~/cabinet/rent/homestead">Участки</a></li>*@
                <li><a href="~/cabinet/rent/commerce">Коммерция</a></li>
            </ol>
        </li>
        <li><a class="3" href="~/cabinet/newbuilding/list">ЖК Новострои</a></li>
        <li><a class="4" href="~/cabinet/news/list">Новости</a></li>
        <li><a class="4" href="~/cabinet/feedbacks/list">Отзывы</a></li>
        <li><a class="4" href="~/cabinet/vacancies/list">Вакансии</a></li>
        <li><a class="4" href="~/cabinet/builders/list">Застройщики</a></li>
        <li><a class="4" href="~/cabinet/districts/list">Районы</a></li>
    </ul>
</div>
<div id="adminka1" class="tabset_content tabset_content_active">
    <h2 class="tabset_label">adminka</h2>

    <form enctype="multipart/form-data" action="" method="POST">
        @Html.AntiForgeryToken()
        @Html.HiddenFor(m => m.Id)
        @Html.ValidationSummary()
        <div class="contact_info">
            <table>
                <tr>
                    <td>Горячее:</td>
                    <td>@Html.CheckBoxFor(m => m.IsHot)</td>
                </tr>
                <tr>
                    <td>Эксклюзив:</td>
                    <td>@Html.CheckBoxFor(m => m.IsExclusive)</td>
                </tr>
                @if (ViewBag.Categories != null && ViewBag.Categories.Count > 0)
                {
                    <tr>
                        <td>Категория:</td>
                        <td>@Html.DropDownListFor(m => m.CategoryId, new SelectList(ViewBag.Categories, "Id", "RussianName"))</td>
                    </tr>
                }
                @*@if (ViewBag.Titles != null && ViewBag.Titles.Count > 0)
                {
                    <tr>
                        <td>Заголовок:</td>
                        <td>@Html.DropDownListFor(m => m.TitleId, new SelectList(ViewBag.Titles, "Id", "RussianName"))</td>
                    </tr>
                }*@
                <tr>
                    <td>Заголовок:</td>
                    <td>@Html.TextBoxFor(m => m.TitleName)</td>
                </tr>
                @if (ViewBag.Districts != null && ViewBag.Districts.Count > 0)
                {
                    <tr>
                        <td>Район:</td>
                        <td>@Html.DropDownListFor(m => m.DistrictId, new SelectList(ViewBag.Districts, "Id", "RussianName"))</td>
                    </tr>
                }
                <tr>
                    <td>Цена($):</td>
                    <td>@Html.TextBoxFor(m => m.Price)</td>
                </tr>
                <tr>
                    <td>Описание:</td>
                    <td>@Html.TextAreaFor(m => m.Description, new { @rows = "20" })</td>
                </tr>

                <tr>
                    <td>Адрес:</td>
                    <td>@Html.TextBoxFor(m => m.Street)</td>
                </tr>

                <tr>
                    <td>YouTube:</td>
                    <td>@Html.TextBoxFor(m => m.YouTubeUrl)</td>
                </tr>
                @if (ViewBag.MarketTypes != null && ViewBag.MarketTypes.Count > 0)
                {
                    <tr>
                        <td>Тип рынка: </td>
                        <td>@Html.DropDownListFor(m => m.MarketTypeId, new SelectList(ViewBag.MarketTypes, "Id", "RussianName"))</td>
                    </tr>
                }

                @if (ViewBag.ParentId != (int)ParrentCategories.Homestead)
                {
                    if (ViewBag.TrimConditions != null && ViewBag.TrimConditions.Count > 0)
                    {
                        <tr>
                            <td>Состояние: </td>
                            <td>@Html.DropDownListFor(m => m.TrimConditionId, new SelectList(ViewBag.TrimConditions, "Id", "RussianName"))</td>
                        </tr>
                    }
                }
                @if (Model.AdvertPropertyValues != null && Model.AdvertPropertyValues.Count > 0)
                {
                    for (var i = 0; i < Model.AdvertPropertyValues.Count; i++)
                    {
                        <tr>
                            <td>@Model.AdvertPropertyValues[i].AdvertProperty.RussianName: </td>
                            <td>
                                <input type="hidden" value="@Model.AdvertPropertyValues[i].AdvertProperty.RussianName" name="AdvertPropertyValues[@i].AdvertProperty.RussianName" />
                                <input type="hidden" value="@Model.AdvertPropertyValues[i].AdvertPropertyId" name="AdvertPropertyValues[@i].AdvertPropertyId" />
                                <input type="text" value="@Model.AdvertPropertyValues[i].PropertiesValue" name="AdvertPropertyValues[@i].PropertiesValue" />
                            </td>
                        </tr>
                    }
                }
            </table>
            <h3>Общие фотографии</h3>
            @if (Model.Images != null && Model.Images.Count > 0)
            {
                foreach (var image in Model.Images)
                {
                    <div class="photo_" id="image_@image.Id">
                        <img src="@Url.Content(image.Url+image.FileName)" width="272" height="211" />
                        <a onclick="deleteImage(@image.Id);">X</a>
                    </div>
                }
            }
            <div class="file_upload">
                <input type="file" multiple="multiple" accept="image/*" name="images" class="select_photo" id="files" />
                <br />
                <output id="list"></output>
            </div>
            <h3>Планировки</h3>

            @if (Model.PlanImages != null && Model.PlanImages.Count > 0)
            {
                foreach (var image in Model.PlanImages)
                {
                    <div class="photo_" id="planimage_@image.Id">
                        <img src="@Url.Content(image.Url+image.FileName)" width="272" height="211" />
                        <a onclick="deletePlanImage(@image.Id);">X</a>
                    </div>
                }
            }
            <div class="file_upload">
                <input type="file" multiple="multiple" accept="image/*" name="planimages" class="select_photo" id="files_plan" />
                <br />
                <output id="list_plan"></output>
            </div>

            <button type="submit">Сохранить</button>
        </div>
    </form>

    <div class="map_managercard">
        <div id="mapapart_prod">
            <div id="map" class="shadow"></div>
            @*<iframe src="https://www.google.com/maps/embed?pb=!1m16!1m12!1m3!1d101681.05935008111!2d30.6809567124572!3d46.42350678371972!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!2m1!1z0L7QtNC10YHRgdCwINC20LXQvNGH0YPQttC40L3Riw!5e0!3m2!1sru!2sua!4v1485299309010" width="614px" height="428px" frameborder="0" style="border:0" allowfullscreen></iframe>*@
        </div>
    </div>
</div>




